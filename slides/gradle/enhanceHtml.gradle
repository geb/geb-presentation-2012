import org.gradle.plugins.jsoup.Jsoup
import org.jsoup.nodes.Element
import org.jsoup.select.Elements
import com.uwyn.jhighlight.renderer.XhtmlRendererFactory

task enhancedHtml(type: Jsoup) {
    outputs.upToDateWhen { false }
    source markdown

    // Wrap each section in a “section”.
    transform {
        def isHeading = { it.tagName() ==~ /h\d+/ }

        def firstChild = body().child(0)
        assert isHeading(firstChild) : "first child of the body is expected to be a heading"

        def siblings = firstChild.siblingElements()

        def heading = firstChild
        def inSection = [firstChild]
        Element next = heading.nextElementSibling()
        while (true) {
            if (next == null || isHeading(next)) {
                def section = heading.before("<section class='slide'/>").previousElementSibling()
                Elements inSectionElements = new Elements(inSection)
                section.html(inSectionElements.outerHtml())
                inSectionElements.remove()

                if (next == null) {
                    break
                } else {
                    inSection = [next]
                    heading = next
                }
            } else {
                inSection << next
            }

            next = next.nextElementSibling()
        }
    }

    // add a class to title slides
    transform {
        body().select("section.slide").each { section ->
            if (section.child(0).tagName() == "h1") {
                section.addClass("title-slide")
                def children = section.children()
                children.remove()
                section.append("<div class='title-slide-content' />").child(0).html(children.outerHtml())
            }
        }
    }

    // Add a slide id to each slide
    transform {
        def i = 1
        body().select("section.slide").each { section ->
            section.attr("id", "slide-${i++}")
        }
    }

    // Turn “notes” into an aside
    transform {
        body().select("section.slide").each { slide ->
            def hr = slide.select("hr")
            if (hr) {
                hr = hr.first()
                def content = []
                def next = hr.nextElementSibling()
                while (next != null) {
                    content << next
                    next = next.nextElementSibling()
                }
                if (content) {
                    def notes = hr.before("<aside class='notes' />").previousElementSibling()
                    def contentElements = new Elements(content)
                    notes.html(contentElements.outerHtml())
                    contentElements.remove()
                    hr.remove()
                }
            }
        }
    }

    // Syntax highlighting
    transform {
        def codeTags = body().select("code")
        codeTags.each { code ->
            def text = code.text()
            def input = new ByteArrayInputStream(code.text().getBytes("utf-8"))
            def renderer = XhtmlRendererFactory.getRenderer("groovy")
            def out = new ByteArrayOutputStream()
            renderer.highlight("test", input, out, "utf-8", true)
            code.html(new String(out.toByteArray(), "utf-8"))
            code.select("br").remove()
            code.childNodes().findAll { it.nodeName().equals("#comment") }*.remove()
            code.html(code.html().trim())
            def parent = code.parent()
            if (parent.tagName() == "pre") {
                parent.addClass("code")
            }
        }
    }
}
